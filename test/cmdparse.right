+ ### *******************************
+ ### ***   Set/show commands     ***
+ ### *******************************
+ ########################################
+ ###   test args and baseneme...
+ ########################################
+ set args this is a test
+ show args
Argument list to give program being debugged when it is started is 
"this is a test".
+ show basename
basename is on.
+ set basename foo
*** Expecting 'on', 1, 'off', or 0. Got: foo.
+ show base
basename is on.
+ set basename off
+ show basename
basename is off.
+ set basename 0
+ show basename
basename is off.
+ set basename 1
+ show basename
basename is on.
+ ########################################
+ ###   test listsize tests...
+ ########################################
+ show listsize
Number of source lines pydb will list by default is 10.
+ set listsize 20
+ show listsi
Number of source lines pydb will list by default is 20.
+ set listsize abc
*** Expecting an integer, got: abc
+ set listsize -20
+ set listsize 20 forever
+ ########################################
+ ###  test linetrace...
+ ########################################
+ set linetrace delay
*** Need a 3rd floating-point number
+ set linetrace delay 2
+ show linetrace delay
line trace delay is 2.0. (In seconds)
+ set linetrace delay 0.5
+ show linetrace delay
line trace delay is 0.5. (In seconds)
+ set linetrace delay foo
*** 3rd argument foo is not a floating-point number
+ show linetrace delay
line trace delay is 0.5. (In seconds)
+ set linetrace on
+ show linetrace
line tracing is on.
+ set linetrace off
+ show linetrace
line tracing is off.
+ ########################################
+ ###  bad enable disable
+ ########################################
+ enable 10
*** No breakpoint numbered 10
+ disable 10
No breakpoint numbered 10
+ enable foo
Breakpoint index 'foo' is not a number
+ disable foo
Breakpoint index 'foo' is not a number
+ ########################################
+ ###   test list
+ ########################################
+ list
  1  	#!/usr/bin/python
  2  ->	"""Towers of Hanoi"""
  3  	import sys,os
  4  	
  5  	def hanoi(n,a,b,c):
  6  	    if n-1 > 0:
  7  	       hanoi(n-1, a, c, b) 
  8  	    print "Move disk %s to %s" % (a, b)
  9  	    if n-1 > 0:
 10  	       hanoi(n-1, c, b, a) 
 11  	
 12  	i_args=len(sys.argv)
 13  	if i_args != 1 and i_args != 2:
 14  	    print "*** Need number of disks or no parameter"
 15  	    sys.exit(1)
 16  	
 17  	n=3
 18  	
 19  	if i_args > 1:
 20  	  try: 
+ list
 21  	    n = int(sys.argv[1])
 22  	  except ValueError, msg:
 23  	    print "** Expecting an integer, got: %s" % repr(sys.argv[1])
 24  	    sys.exit(2)
 25  	
 26  	if n < 1 or n > 100: 
 27  	    print "*** number of disks should be between 1 and 100" 
 28  	    sys.exit(2)
 29  	
 30  	hanoi(n, "a", "b", "c")
[EOF]
+ list -
  1  	#!/usr/bin/python
  2  ->	"""Towers of Hanoi"""
  3  	import sys,os
  4  	
  5  	def hanoi(n,a,b,c):
  6  	    if n-1 > 0:
  7  	       hanoi(n-1, a, c, b) 
  8  	    print "Move disk %s to %s" % (a, b)
  9  	    if n-1 > 0:
 10  	       hanoi(n-1, c, b, a) 
 11  	
 12  	i_args=len(sys.argv)
 13  	if i_args != 1 and i_args != 2:
 14  	    print "*** Need number of disks or no parameter"
 15  	    sys.exit(1)
 16  	
 17  	n=3
 18  	
 19  	if i_args > 1:
 20  	  try: 
+ list 10 15
 10  	       hanoi(n-1, c, b, a) 
 11  	
 12  	i_args=len(sys.argv)
 13  	if i_args != 1 and i_args != 2:
 14  	    print "*** Need number of disks or no parameter"
 15  	    sys.exit(1)
+ list 10 3
 10  	       hanoi(n-1, c, b, a) 
 11  	
 12  	i_args=len(sys.argv)
 13  	if i_args != 1 and i_args != 2:
+ list hanoi.py:12
  2  ->	"""Towers of Hanoi"""
  3  	import sys,os
  4  	
  5  	def hanoi(n,a,b,c):
  6  	    if n-1 > 0:
  7  	       hanoi(n-1, a, c, b) 
  8  	    print "Move disk %s to %s" % (a, b)
  9  	    if n-1 > 0:
 10  	       hanoi(n-1, c, b, a) 
 11  	
 12  	i_args=len(sys.argv)
 13  	if i_args != 1 and i_args != 2:
 14  	    print "*** Need number of disks or no parameter"
 15  	    sys.exit(1)
 16  	
 17  	n=3
 18  	
 19  	if i_args > 1:
 20  	  try: 
 21  	    n = int(sys.argv[1])
+ list hanoi
  1  	#!/usr/bin/python
  2  ->	"""Towers of Hanoi"""
  3  	import sys,os
  4  	
  5  	def hanoi(n,a,b,c):
  6  	    if n-1 > 0:
  7  	       hanoi(n-1, a, c, b) 
  8  	    print "Move disk %s to %s" % (a, b)
  9  	    if n-1 > 0:
 10  	       hanoi(n-1, c, b, a) 
 11  	
 12  	i_args=len(sys.argv)
 13  	if i_args != 1 and i_args != 2:
 14  	    print "*** Need number of disks or no parameter"
 15  	    sys.exit(1)
 16  	
 17  	n=3
 18  	
 19  	if i_args > 1:
 20  	  try: 
+ list hanoi 10
  5  	def hanoi(n,a,b,c):
  6  	    if n-1 > 0:
  7  	       hanoi(n-1, a, c, b) 
  8  	    print "Move disk %s to %s" % (a, b)
  9  	    if n-1 > 0:
 10  	       hanoi(n-1, c, b, a) 
+ list gcd.py:24
 14  	    if len(sys.argv) != 3:
 15  	        # Rather than use sys.exit let's just raise an error
 16  	        raise Exception, "Need to give two numbers"
 17  	    for i in range(2):
 18  	        try: 
 19  	            sys.argv[i+1] = int(sys.argv[i+1])
 20  	        except ValueError, msg:
 21  	            print "** Expecting an integer, got: %s" % repr(sys.argv[i])
 22  	            sys.exit(2)
 23  	    
 24  	def gcd(a,b):
 25  	    """ GCD. We assume positive numbers"""
 26  	
 27  	    # Make: a <= b
 28  	    if a > b:
 29  	       (a, b) = (b, a)
 30  	       
 31  	    if a <= 0:
 32  	        return None
 33  	    if a == 1 or b-a == 0:
+ # first and last file names are different
+ list gcd.py:24 hanoi.py:10
*** filename in the range must be the same
+ # File doesn't have 50 lines
+ list 50
[EOF]
+ set listsi 6
+ list 5
  2  ->	"""Towers of Hanoi"""
  3  	import sys,os
  4  	
  5  	def hanoi(n,a,b,c):
  6  	    if n-1 > 0:
  7  	       hanoi(n-1, a, c, b) 
+ # Invalid list command - need lineno or fn name
+ list hanoi.py
*** The specified object 'hanoi.py' is not a function, or not found along sys.path or no line given.
+ ########################################
+ ###  test prompt, misc...
+ ########################################
+ show prompt
pydb's prompt is "(Pydb) ".
+ show foo
*** Undefined show command "foo".
+ cd
*** Argument required (new working directory).
+ ########################################
+ ###   test numeric argument syntax 
+ ########################################
+ up fdsafdsa
*** up command: Expecting an integer, got: fdsafdsa
+ u='foo'
+ down 1 b c
*** down command: Expecting an integer, got: 1 b c
+ frame foo
*** The 'frame' command requires a frame number. Got: foo
+ step -1
*** step command: Expecting a positive integer at least 0, got: -1
+ next -1
*** next command: Expecting a positive integer at least 0, got: -1
+ ########################################
+ ###   test info
+ ########################################
+ info line
Line 2 of "hanoi.py" at instruction 0
+ info source
Current Python file is hanoi.py
+ ########################################
+ ###   help/info stuff
+ ########################################
+ help nogood
Undefined command: "nogood". Try "help".

+ help restart
restart - Restart debugger and program via an exec
        call. All state is lost, and new copy of the debugger is used.
+ help run
run [args...]

        Run/Restart the debugged Python program. If a string is
        supplied that becomes the new command arguments.  History,
        breakpoints, actions and debugger options are preserved.
+ help set
This command modifies parts of the debugger environment.
You can see these environment settings with the 'show' command.

List of set subcommands:

set args -- Set argument list to give program being debugged when it is started
set basename -- Set short filenames (the basename) in debug output
set cmdtrace -- Set to show lines read from the debugger command file
set history -- Generic command for setting command history parameters
set interactive -- Set whether we are interactive
set linetrace -- Set line execution tracing and delay on tracing
set listsize -- Set number of source lines the debugger will list by default
set logging -- Set logging options
set prompt -- Set debugger's prompt
+ help set linesize
*** Unknown 'help set' subcommand linesize
+ help set listsize
Set number of source lines the debugger will list by default.
+ help show
Generic command for showing things about the debugger.

List of show subcommands:

show args -- Show argument list to give debugged program when it is started
show basename -- Show if we are to show short of long filenames
show cmdtrace -- Show if we are to show debugger commands before running
show commands -- Show the history of commands you typed
show directories -- Current search path for finding source files
show history -- Generic command for showing command history parameters
show interactive -- Show whether we are interactive
show linetrace -- Show the line tracing status. Can also add 'delay'
show listsize -- Show number of source lines the debugger will list by default
show logging -- Show logging options
show prompt -- Show debugger's prompt
show version -- Show what version of the debugger this is
+ help show listsize
Show number of source lines the debugger will list by default
+ help info
Generic command for showing things about the program being debugged.

List of info subcommands:

info args -- Argument variables of current stack frame
info breakpoints -- Status of user-settable breakpoints
info display -- Expressions to display when program stops, with code numbers
info globals -- Global variables of current stack frame
info line -- Current line number in source file
info locals -- Local variables of current stack frame
info program -- Execution status of the program
info source -- Information about the current Python file
+ #######################################
+ # The below  "help info" lines should
+ # have '.' append to the end whereas
+ # in the above listing they were 
+ # omitted. 
+ #######################################
+ help info program
Execution status of the program.
+ help info source
Information about the current Python file.
+ #######################################
+ # The below "help show" commands have 
+ # more than one line of output also
+ # ommited in a simple "show"
+ #######################################
+ help show args
Show argument list to give debugged program when it is started.
Follow this command with any number of args, to be passed to the program.
+ help show commands
Show the history of commands you typed.
You can supply a command number to start with, or a `+' to start after
the previous command number shown. A negative number starts from the end.
+ quit
