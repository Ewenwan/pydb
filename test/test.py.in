#!@PYTHON@ -t
# $Id: test.py.in,v 1.11 2006/02/27 01:02:47 rockyb Exp $ -*- Python -*-
"Unit test for Extended Python debugger "
import difflib, os, pprint, time, sys, unittest

top_builddir = "@top_builddir@"
if top_builddir[-1] != os.path.sep:
    top_builddir += os.path.sep
sys.path.insert(0, os.path.join(top_builddir, 'pydb'))
top_srcdir = "@top_srcdir@"
if top_srcdir[-1] != os.path.sep:
    top_srcdir += os.path.sep
sys.path.insert(0, os.path.join(top_srcdir, 'pydb'))

import pydb                

class PdbTest(pydb.Pdb):
    def __init__(self):
        pydb.Pdb.__init__(self)
        self.errLines = []
        self.msgLines = []
        self.msg_last_nocr = False

    def errmsg(self, msg):
        self.errLines.append(msg)

    def msg(self, msg):
        if self.msg_last_nocr:
            self.msgLines[-1] += msg
        else:
            self.msgLines.append(msg)
        self.msg_last_nocr = False

    def msg_nocr(self, msg):
        if self.msg_last_nocr:
            self.msgLines[-1] += msg
        else:
            self.msgLines.append(msg)
        self.msg_last_nocr = True


builddir     = "@builddir@"
if builddir[-1] != os.path.sep:
    builddir += os.path.sep

top_builddir = "@top_builddir@"
if top_builddir[-1] != os.path.sep:
    top_builddir += os.path.sep

srcdir = "@srcdir@"
if srcdir[-1] != os.path.sep:
    srcdir += os.path.sep

pydir        = os.path.join(top_builddir, "pydb")
pydb_short   = "pydb.py"
pydb_path    = os.path.join(pydir, pydb_short)

def run_debugger(testname, pythonfile, args=''):
    global srcdir, builddir, pydir
    cmdfile     = os.path.join(srcdir, "%s.cmd" % testname)
    rightfile   = os.path.join(srcdir, "%s.right" % testname)
    outfile     = "%s.out" % testname
    # print "builddir: %s, cmdfile: %s, outfile: %s, rightfile: %s" % \
    # (builddir, cmdfile, outfile, rightfile)

    if os.path.exists(outfile): os.unlink(outfile)

    cmd = "%s --command %s --output=%s %s %s" % \
          (pydb_path, cmdfile, outfile, pythonfile, args)
    
    os.system(cmd)
    fromfile  = rightfile
    fromdate  = time.ctime(os.stat(fromfile).st_mtime)
    fromlines = open(fromfile, 'U').readlines()
    tofile    = outfile
    todate    = time.ctime(os.stat(tofile).st_mtime)
    tolines   = open(tofile, 'U').readlines()
    
    diff = list(difflib.unified_diff(fromlines, tolines, fromfile,
                                     tofile, fromdate, todate))
    if len(diff) == 0:
        os.unlink(outfile)
    for line in diff:
        print line,
    return len(diff) == 0
    
class PdbTests(unittest.TestCase):

    ## Don't use assertTrue to be compatible with older version of
    ## unittest
    
    def test_cmdparse(self):
        """Test command parsing"""
        result=run_debugger(testname='cmdparse',
                            pythonfile='%shanoi.py' % srcdir)
        self.assertEqual(True, result, "cmdparse")

    def test_brkpt(self):
        """Test breakpoint setting/display"""
        result=run_debugger(testname='brkpt1',
                            pythonfile='%shanoi.py' % srcdir)
        self.assertEqual(True, result, "brkpt1")

    def test_brkpt2(self):
        """Test breakpoint setting/display"""
        result=run_debugger(testname='brkpt2',
                            pythonfile='%sgcd.py' % srcdir,
                            args='3 5')
        self.assertEqual(True, result, "brkpt2")

    def test_run(self):
        """Test run/restart"""
        result=run_debugger(testname='run',
                            pythonfile='%shanoi.py' % srcdir)
        # Python 2.3.5 stack traces look different and I 
        # don't know enough about what version changes what. So for
        # now, we run the test and if it doesn't crash on anything
        # that is less than version 2.4.2 we'll call it a success.
        # For version 2.4.2 (and above?) we'll assume a more 
        # stringent test.
        if sys.version_info[0:2] == (2, 4) and sys.version_info[3] >= 2:
            self.assertEqual(True, result, "run")

    def test_return(self):
        """Test of run with return"""
        print
        print "**********************************************************"
        print "***                   NOTE                             ***"
        print "*** The traceback 'Need to give two numbers' is right  ***"
        print "**********************************************************"
        result=run_debugger(testname='run2',
                            pythonfile='%sgcd.py' % srcdir)
        self.assertEqual(True, result, "run2")

    def test_filebug(self):
        """Test __file__"""
        result=run_debugger(testname='filebug',
                            pythonfile='%sfilebug.py' %srcdir)
        self.assertEqual(True, result, "filebug")
        
    def test_pwd_cd(self):
        """Test pwd and cd commands"""
        pdb = PdbTest()
        pdb.noninteractive = True

        # Run pwd
        pdb.msgLines=[]; pdb.errLines=[]
        pdb.do_pwd("")
        self.assertEqual(True, len(pdb.errLines) == 0,
                         "pwd gave error: " + str(pdb.errLines))
        self.assertEqual(True, len(pdb.msgLines) == 1)
        my_cd = pdb.msgLines[0]

        # Run cd
        pdb.msgLines=[]; pdb.errLines=[]
        pdb.do_cd(".")
        self.assertEqual(True, len(pdb.errLines) == 0,
                         "cd gave error: " + str(pdb.errLines))
        self.assertEqual(True, len(pdb.msgLines) == 0)
        pdb.msgLines=[]; pdb.errLines=[]
        pdb.do_pwd("")
        self.assertEqual(True, pdb.msgLines[0] == my_cd)
        
        
if __name__ == "__main__":
    unittest.main()
